#!/bin/bash

# info    : buildpack 预处理脚本
# Author  : ethan@goodrain.com
# CTime   : 2015.07.13
# History : 0.1 first release
# Comment : 根据用户的选择，添加必要依赖及Procfile内容

[ $DEBUG ] && set -x
PROC_ENV=${PROC_ENV:-\{\}}

BUILD_DIR=$1
LIBDIR="/tmp/pre-compile/lib"

function output_redirect() {
    if [[ "$slug_file" == "-" ]]; then
        cat - 1>&2
    else
        cat -
    fi
}

# 定义debug输出信息
function debug_info() {
    DEBUG=${DEBUG:=false}
    #current_time=`date '+%Y-%m-%d %H:%M:%S'`
    if [ "$DEBUG" == "true" ]; then
        echo $'debug:======>' $* | output_redirect
    fi
}

function echo_title() {
    #current_time=`date '+%Y-%m-%d %H:%M:%S'`
    #echo $'\e[1G----->' $current_time $* | output_redirect
    echo $'builder:----->' $* | output_redirect
}

function echo_normal() {
    #echo $'\e[1G      ' $* | output_redirect
    echo $'builder:      ' $* | output_redirect
}

function ensure_indent() {
    while read line; do
        if [[ "$line" == --* ]]; then
            current_time=$(date '+%Y-%m-%d %H:%M:%S')
            #echo $'\e[1G'$line | sed -e "s/--> /--> $current_time /" | output_redirect
            echo $'builder:'$line | sed -e "s/--> /--> $current_time /" | output_redirect
        else
            #echo $'\e[1G      ' "$line" | output_redirect
            echo $'builder:      ' "$line" | output_redirect
        fi
    done
}

# This function ensures that environment variables are valid
# in all environments where the script runs
# usage: export_env_global key value
function export_env_global() {
    local key=$1
    local value=$2
    # make sure can valid in current script
    export $key=$value
    # the script will be sourced in runner
    echo "export $key=$value" >>/tmp/build/.profile.d/globalenv.sh
}

# Detect OS and CPU architecture
export_env_global OS $(uname | tr A-Z a-z)

if [[ "$(uname -p)" = "i686" ]] || [[ "$(uname -p)" = "x86_64" ]] || [[ "$(uname -p)" = "amd64" ]]; then
    export_env_global ARCH "x86_64"
elif [[ "$(uname -p)" = "aarch64" ]]; then
    export_env_global ARCH "arm64"
else
    echo_title "Unknown CPU Arch"
    exit 1
fi
echo_title "Detected CPU architecture $OS-${ARCH}"

# Language runtimes file
PHPfile="composer.json"
PythonRuntimefile="runtime.txt"
PHPRuntimefile="runtime.txt"
JAVARuntimefile="system.properties"
NodejsRuntimefile="package.json"
RubyRuntimefile="Gemfile"
GolangRuntimefile="runtime.txt"
StaticRuntimefile="runtime.txt"

# default runtimes
PHPDefault="5.6.11"

# deps file
Pythondeps="requirements.txt"
Rubydeps="Gemfile"

# The jq bin can run both amd64 and arm64
# Different Buildpacks use different calls to JQ
# Both to environment variables and direct calls
# Todo: change jq calls from environment variables to direct calls
export_env_global JQBIN "/tmp/pre-compile/bin/jq"

# common bins should be stored in this dir
# enables PATH variables to be accumulated in the runner environment
export_env_global PATH \$PATH:$PATH:/tmp/pre-compile/bin/

read_json() {
    key=$1
    echo $PROC_ENV | jq --raw-output "$key // \"\"" || return 1
}

#LANG=`read_json ".language"`      # null|(php|ruby|python|nodejs|java-war|java-maven|static)
#RUNTIMES=`read_json ".runtimes"`  # null|(确切的版本)
#DEPDS=`read_json ".dependencies"` # {}| 相应的依赖
#PROCFILE=`read_json ".procfile"`  # null|确切值

# import process fuctions
source $LIBDIR/depds.sh
source $LIBDIR/procfile.sh
source $LIBDIR/runtimes.sh
source $LIBDIR/slugignore.sh
source $LIBDIR/sqlvercontrol.sh

#============ main ==========

# 处理运行时版本
echo_title "Prepare Handle Language $LANGUAGE RuntimeVersion $RUNTIMES"

#Save_Runtimes $LANGUAGE $RUNTIMES

R6D_Runtimes $LANGUAGE $RUNTIMES

# 处理依赖
Save_Deps $LANGUAGE "$DEPDS"

# 根据判断决定是否利用 liquibase 处理数据库版本

detectSqlControl $LANGUAGE

# 处理Procfile
#Save_Procfile $LANGUAGE "$PROCFILE"

R6D_Procfile $LANGUAGE "$PROCFILE"

initSlugIgnore $LANGUAGE

echo_title "Prepare Handle $RUNTIMES Success"
